== Primitives ==
"" or '' (LITERAL) - Specify a literal thing to match, the quote character can
                     be escaped to use it inside the literal using backslash
{...} (BLOCK)      - Specify a block, space seperated items inside the braces
                     are arguments to provide to the block push. Custom
                     delimiter(s) can be specified with [...] or <...>. Default
                     delimiter is '{'.
QUOTE              - Grab quote based on delimiters. Default delimiters are '
                     and "
DELIM              - Delimited stucture, grab parts between delimiters.
                     Delimiter is first non-space character after the keyword.
                     If [...] or <...> are specified they provide extra
                     delimiters that can be used to quote the delimiter so that
                     you can use a multi-character delimiter.
CONTROL            - A non-SYMBOL non-UALPHANUM non-SPACE character sequence
                     (\0, etc)
SYMBOL             - Non alphanumerc character sequence that is also not control
                     characters or space. Underscore can be used, but not as
                     the first character.
NUMBER             - Alphanumeric character sequence that starts with a number,
                     may also include a single decimal. Underscore is not
                     allowed.
ALPHA              - Alphabetic character sequence (does not include
                     underscore)
ALPHANUM           - Sequnece of alphabetic or numeric characters, not starting
                     with a numeric character. Underscore is not allowed.
UALPHANUM          - Same as ALPHANUM except that underscore is allowed
SPACE              - Sequence of whitespace characters (including newline)
NOSPACE            - Used to specify that whitespace is not allowed here

== Constructs ==

(x|y|z) this or that or that, first match is used, left to right ordering.

== Modifiers ==
+ - one or more
? - optional
* - any quantity

== Flags ==
^ - do a keyword check
# - do not capture

== Delimiters ==
NOTE: In all cases paired characters are swapped with their pair for the
      closing side
NOTE: For the 'DELIM' primitive this specifies characters allowed to quote long
      delimiters
[...] - allowed opening delimiter(s) for quotes (space separated, quoted with ' or ")
        a '/' may be used to seperate opening and closing if you want to
        specify one of each instead of multiple openings. Otherwise closing is
        the same as the opening except with mirrorable character mirrored.
<...> - Same as [...] except that closing delimiter has all the characters
        reversed from the opening. Paired characters are still replaced with
        their reflection. You cannot use '/' to seperate opening and closing in
        <...>.

== Custom ==

You can name patterns and use them inside other patterns. Pattern names must be
all lowercase alphanumerc and underscore.

Named patterns may be self-recursive, and can use names that are not yet
defined, binding occurs when needed, not at compile-time.

== Example ==

This would be the pattern for a GSD file:

    (';'|'\n'|NUMBER|QUOTE["'" '"' '`']|{}|^SYMBOL|^UALPHANUM)*

Pattern for patterns:

    segment:
        (
            ( '#' | '^' )*
            ( UALPHANUM | QUOTE['"' "'"] )
        )
        (
            '['
            ( QUOTE["'" '"'] '/' QUOTE["'" '"'] | QUOTE["'" '"']+ )
            ']'

            |

            '<'
            QUOTE["'" '"']+
            '>'
        )?
        ( '?' | '+' | '*' )?

    alternate:
        '('
        ( alternate | segment )+
        (
            '|'
            ( alternate | segment )+
        )+
        ')'
        ( '?' | '+' | '*' )?

    pattern:
        ( alternate | segment )+

== SHORT FORM NOT ALLOWED ==

This is what a short-form would look like:

''
""
{}
T
Q
D
C
S
N
A
AN
UAN
SP
NSP

Readability there is horrible, learn to type faster instead.
Ant of disapproval:
 \/                /\_/\
("")(===)(=)     _/   \ |
 {} /\ /\    ___/   /|   \_
------------/ /   / /  \ \ \

